import { Component, OnInit } from '@angular/core';
import { FormGroup, FormControlName, FormControl, Validators } from '@angular/forms';
import { EmployeeService } from 'src/app/service/employee.service';
import { ActivatedRoute } from '@angular/router';
import { Employee } from 'src/app/domain/employee';
import { MatSnackBar } from '@angular/material/snack-bar';

@Component({
  selector: 'app-edit-emp',
  template: `
  <hr/>
  <br/>
  <h3 style="text-align:center">Edit Employee</h3>

  <!-- for ReactiveFormsModdule -->
  <form [formGroup]="employeeForm" (ngSubmit)="editEmployee()">

  <!-- no need since id is autogenerated on BE
  <mat-form-field  appearance="outline">
  <mat-label>ID</mat-label>

    <input matInput formControlName="id" type="number" class="example-right-align">
  </mat-form-field>
  -->

  <mat-form-field appearance="outline">
    <mat-label>Employee First Name</mat-label>
    <!-- add formControlName property -->
    <input matInput formControlName="firstName" placeholder="Enter Employee First Name">
    <mat-hint>First Name</mat-hint>
  </mat-form-field>

  <mat-form-field appearance="outline">
    <mat-label>Employee Last Name</mat-label>
    <!-- add formControlName property -->
    <input matInput formControlName="lastName" placeholder="Enter Employee Last Name">
    <mat-hint>Last Name</mat-hint>
  </mat-form-field>

  <mat-form-field appearance="outline">
  <mat-label>Gender</mat-label>
  <!-- add formControlName property -->
  <mat-select [(value)]="gender" formControlName="gender">
    <mat-option>None</mat-option>
    <mat-option value="male">Male</mat-option>
    <mat-option value="female">Female</mat-option>
  </mat-select>
  </mat-form-field>


  <mat-form-field  appearance="outline">
    <mat-label>Salary</mat-label>
    <!-- add formControlName property -->
    <input matInput formControlName="salary" type="number" class="example-right-align">
    <span matPrefix>$&nbsp;</span>
    <span matSuffix>.00</span>
  </mat-form-field>

  <mat-form-field appearance="outline">
  <mat-label>Resigned</mat-label>
  <!-- add formControlName property -->
  <mat-select [(value)]="resigned" formControlName="resigned">
    <mat-option>None</mat-option>
    <mat-option value="true">True</mat-option>
    <mat-option value="false">False</mat-option>
  </mat-select>
  </mat-form-field>

  <button [disabled]="!employeeForm.valid" style="width:80%"  mat-flat-button >Submit</button>
  </form>
  `,
  styles: [`
  .mat-form-field{
    width:80%;
    margin-left: 10vh;
    margin-right: 10vh;
  }
  button {
    margin-left: 10vh;
    margin-right: 10vh;
  }
  `]
})
export class EditEmpComponent implements OnInit {
  employeeForm = new FormGroup({
    // id : new FormControl("",[Validators.required]),
    firstName : new FormControl("",[Validators.required]),
    lastName : new FormControl("",[Validators.required]),
    gender : new FormControl("",[Validators.required]),
    salary : new FormControl("",[Validators.required]),
    resigned : new FormControl("",[Validators.required])
  })

  //invoking service 
  constructor(private employeeService : EmployeeService,
    //and ActivatedRoute for getting employee id to be updated
    private router : ActivatedRoute  ,
    //invoking snackbar
    private snackbar : MatSnackBar
  ) { }

  //storage for gender & resigned
  gender:string;
  resigned:string;

  //storage for id & employee
  id : number;
  newEmployee : Employee;

  ngOnInit(): void {
    //create blank employee which will store the oldEmployee
    this.newEmployee = new Employee();
    //get id of employee to be updated
    this.id = this.router.snapshot.params["id"];
    //invoking service method then subscribe to get oldEmployee
    this.employeeService.viewEmployeeById(this.id).subscribe(emp => {
      console.log(emp);
      //set blank newEmployee to selected emp to be updated
      this.newEmployee = emp;
    })

  }

  //editEmployee
  editEmployee(){
    //seeting the employeeForm values to newEmployee
    this.newEmployee = this.employeeForm.value;
    //invoking service method then subscribe
    this.employeeService.editEmployee(this.id, this.newEmployee).subscribe(emp => {
      console.log(emp)
      //clear input fields
      this.employeeForm.reset();
    })

    //invoking snackbar
    this.snackbar.open("Successfully updated Employee with ID : "+this.id),
      "Close", {duration : 2000, verticalPosition : "top"}

  }

}
