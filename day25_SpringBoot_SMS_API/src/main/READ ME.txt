same config from day 24 : JPA, MySQL, Spring Web

domain : we use @OneToMany on Teacher class alone - no need to config on Student class
    => @Entity
    => @Id
    => @GeneratedValue(strategy = )

-------------------------------------------------------------------------------------------------
3 Tables will be created : student, teacher & teacher_students
-------------------------------------------------------------------------------------------------

application.properties
    spring.datasource.url=jdbc:mysql://localhost:3306/sms?useSSL=false
    spring.datasource.username=root
    spring.datasource.password=PASSWORD
    spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

    #spring.jpa.hibernate.ddl-auto=create
    spring.jpa.hibernate.ddl-auto=update
    spring.jpa.generate-ddl=true
    spring.jpa.show-sql=true

repository : Student and Teacher repository (interface)
    => @Repository
    => extends JpaRepository<Student,Long> and JpaRepository<Teacher,Long>

service : Student and Teacher class
    => @Service
    => @Autowired
    => for add(X x) -> .save(x)
    => for view(X x) -> .findById(x) : append.orElse(null) as its output is Optional<X>
    => for edit(X x, Y y) -> .findById(x).map(z->{
            z.set(y)
            return repository.save(z);
        });
    => for delete(X x) -> deleteById(x)
    => for addStudentToTeacher(Long teacherId, Long studentId) ->
        create blank student object then set the student to be added via repository .findById()
            => Student student = studentRepository.findById(studentId).orElse(null);
        on teacherRepository, use findById, map then return the save teacher via on the repository
           teacherRepository.findById(teacherId).map(teacher ->{
                teacher.getStudents().add(student);
                return teacherRepository.save(teacher).getStudents();
           });

controller : Student and Teacher API
    => @RestController
    => @RequestMapping
    => @Autowired
    => @PostMapping
        @RequestBody : use for adding object on database
    => @GetMapping
        @PathVariable : use for putting id on URL
        @RequestParam : use for putting ?field_name=field_to_be_found on URL
    => @PutMapping
        @PathVariable : use for putting id on URL
        @RequestBody : use for adding object on database

-------------------------------------------------------------------------------------------------

Postman

POST : localhost:8080/student       SEND
    run console output : Hibernate: insert into student (first_name, grade, last_name) values (?, ?, ?)
GET : localhost:8080/student/view/2       SEND
    run console output : Hibernate: select student0_.id as id1_0_0_, student0_.first_name as first_na2_0_0_, student0_.grade as grade3_0_0_, student0_.last_name as last_nam4_0_0_ from student student0_ where student0_.id=?
PUT : localhost:8080/student/editStudent/2       SEND
    run console output : Hibernate: update student set first_name=?, grade=?, last_name=? where id=?
DELETE : localhost:8080/student/view/2       SEND
    run console output : Hibernate: delete from student where id=?

POST : localhost:8080/teacher       SEND
    run console output : Hibernate: insert into teacher (first_name, last_name) values (?, ?)
GET : localhost:8080/teacher/viewTeacher/1       SEND
    run console output :Hibernate: select teacher0_.id as id1_1_0_, teacher0_.first_name as first_na2_1_0_, teacher0_.last_name as last_nam3_1_0_ from teacher teacher0_ where teacher0_.id=?
                        Hibernate: select students0_.teacher_id as teacher_1_2_0_, students0_.students_id as students2_2_0_, student1_.id as id1_0_1_, student1_.first_name as first_na2_0_1_, student1_.grade as grade3_0_1_, student1_.last_name as last_nam4_0_1_ from teacher_students students0_ inner join student student1_ on students0_.students_id=student1_.id where students0_.teacher_id=?
PUT : localhost:8080/teacher/editTeacher/1       SEND
    run console output : Hibernate: update teacher set first_name=?, last_name=? where id=?
DELETE : localhost:8080/teacher/deleteTeacher/2       SEND
    run console output : Hibernate: delete from teacher where id=?

POST : localhost:8080/teacher/1/addStudent/1
    run console output : Hibernate: select student0_.id as id1_0_0_, student0_.first_name as first_na2_0_0_, student0_.grade as grade3_0_0_, student0_.last_name as last_nam4_0_0_ from student student0_ where student0_.id=?
                         Hibernate: select teacher0_.id as id1_1_0_, teacher0_.first_name as first_na2_1_0_, teacher0_.last_name as last_nam3_1_0_ from teacher teacher0_ where teacher0_.id=?
                         Hibernate: select students0_.teacher_id as teacher_1_2_0_, students0_.students_id as students2_2_0_, student1_.id as id1_0_1_, student1_.first_name as first_na2_0_1_, student1_.grade as grade3_0_1_, student1_.last_name as last_nam4_0_1_ from teacher_students students0_ inner join student student1_ on students0_.students_id=student1_.id where students0_.teacher_id=?
                         Hibernate: delete from teacher_students where teacher_id=?
                         Hibernate: insert into teacher_students (teacher_id, students_id) values (?, ?)
                         Hibernate: insert into teacher_students (teacher_id, students_id) values (?, ?)
-------------------------------------------------------------------------------------------------

encountered error :

    {
        "timestamp": "2020-04-09T14:37:39.253+0000",
        "status": 500,
        "error": "Internal Server Error",
        "message": "Missing URI template variable 'studentId' for method parameter of type Long",
        "path": "/teacher/1/addStudent/1"
    }

make sure that the URL describe on annotation
    => @PostMapping("/{teacherId}/addStudent/{studentID}")
reflects the input parameter of that method
    => @PathVariable Long teacherId, @PathVariable Long studentID
example : teacherId for teacherId & studentID for studentID
    => see addStudentToTeacher method on TeacherController




